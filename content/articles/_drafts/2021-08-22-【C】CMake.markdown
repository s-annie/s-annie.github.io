---
layout: post
title: 【ROS】catkin, ament与CMake
categories: ROS, robotics, tech
---
## catkin的历史
catkin的核心元构建系统最初是为了有效地构建众多相互依赖但又单独开发的CMake项目而设计的。这是由ROS社区开发的，最初是作为标准元构建工具rosbuild的继承者。ROS社区的分布式开发模式有许多模块型项目，并且需要构建可分发的二进制包，这促使他们设计一个系统，有效地合并许多不同的项目，使它们使用一个目标依赖树和构建空间。

为了促进这种合并的构建过程，工作区的源空间将包含模版式的顶层CMakeLists.txt，它自动将其下面的所有Catkin CMake项目添加到单一的大型CMake项目中。然后，用户将像一个统一的CMake项目一样构建这些项目集合，其工作流程类似于标准的CMake源外构建爱你工作流程。他们都是通过调用cmake来配置的，随后通过调用make来构建目标。

$ mkdir build
$ cd build
$ cmake .../src
$ make
为了帮助实现合并构建过程的自动化，Catkin发布了一个名为catkin_make的命令行工具。该命令将上述CMake的工作流程自动化，同时根据标准惯例设置一些变量。这些默认值会导致以下命令的执行。

$ mkdir build
$ cd build
$ cmake .../src -DCATKIN_DEVEL_SPACE=./devel -DCMAKE_INSTALL_PREFIX=./install
$ make -j<核数> -l<核数> [可选目标，如安装] 。
这种方法的一个好处是，总的配置会比单独配置每个包小，而且Make目标可以并行化，甚至在依赖的包之间。

然而，在实践中，这也意味着在大型工作区中，修改一个包的CMakeLists.txt就必须重新配置整个工作区的所有包。

然而，这种方法的一个关键缺陷是，没有故障隔离。一个叶子包（没有依赖关系的包）中的错误会阻止所有包的配置。包可能会有碰撞的目标名称。如果一个包定义了另一个包所需要的变量，合并的构建过程甚至会导致CMake错误不被发现，而且可能取决于独立包的构建顺序。由于软件包被合并到一个CMake调用中，这种方法还需要开发者在其依赖关系中明确指定对某些目标的依赖。

合并构建过程的另一个缺点是，它只能在仅由Catkin CMake包组成的同质工作区工作。其他类型的包，如普通CMake包和自动工具包，不能被整合到一个配置和一个构建步骤中。

孤立的Catkin工作流程

合并构建流程和catkin_make工具的众多缺点促使我们开发了catkin_make_isolated工具。与catkin_make相反，catkin_make_isolated命令使用一个孤立的构建过程，其中每个包都是独立配置、构建和加载到环境中的。

这样一来，每个包都是隔离构建的，接下来的包是在当前包的原子结果上构建的。这就解决了目标碰撞、目标依赖性管理和其他项目间不受欢迎的交叉对话的问题。这也允许其他构建工具（如普通的CMake或autotools）的同质自动化。

孤立的工作流程还启用了以下功能。

允许构建工作区的一部分
构建Catkin和非Catkin项目到一个单一的开发空间中
构建软件包时无需重新配置或重新构建其依赖关系
取消了在构建软件包之前，工作区的所有软件包必须没有CMake错误的要求。
然而，catkin_make_isolated仍有一些问题。首先，它比catkin_make要慢得多，因为它不能并行构建目标，甚至不能构建互不依赖的包。它也缺乏对工作区中软件包列表变化的鲁棒性。由于它是一个 "已发布 "的工具，它也有严格的API稳定性要求。

并行隔离的catkin工作流程和catkin build

catkin_make_isolated的局限性和对其他高级构建工具的需求导致了catkin make isolated的并行版本的开发，即pcmi，作为Project Tango的一部分。

因此，该构建动词的主要行为是按照拓扑顺序孤立地构建每个包，同时并行地构建互不依赖的包。

与catkin_make和catkin_make_isolated相比，其他的功能改进包括以下内容。

使用子命令 "动词 "来更好地组织构建选项和构建相关功能
当软件包被添加到源空间或从源空间移除时，能稳健地适应构建。
基于工作目录，对特定软件包进行上下文感知的构建
能够从工作空间中完全清除单个软件包的产品
利用持久性的构建元数据来捕捉常见的错误
在一个工作区中支持不同的构建 "配置文件"。
明确控制工作区链
对常见的环境配置错误进行额外的错误检查
许多其他命令行用户界面的改进
Additional error-checking for common environment configuration errors


http://design.ros2.org/articles/build_tool.html