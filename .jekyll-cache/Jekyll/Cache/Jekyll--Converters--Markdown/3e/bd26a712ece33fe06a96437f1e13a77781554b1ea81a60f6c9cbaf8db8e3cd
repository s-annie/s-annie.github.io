I"E&<p>最近写测试代码的重担又落到了我的肩上…而且这次的难度还升级了，需要熟练使用mock。去年11月积攒的那些关于unittest和mock的知识全部都忘记了，当时又没有做总结，只好再从头捡起来。找遍全网没有发现特别好的资料，直接看Python的公式网站了(<a href="https://docs.python.org/zh-cn/3/library/unittest.mock-examples.html">unittest.mock上手指南</a>)</p>

<h2 id="关于mock">关于mock</h2>
<p>mock顾名思义，用于在测试中模拟某些变量或者函数。比如说在嵌入式软件中想要测试某个函数，而这个函数中有一个步骤是与硬件的通信，我们就可以通过模仿这一步骤而达到测试其余部分的目的。</p>

<h2 id="mock的基本使用">mock的基本使用</h2>

<h3 id="模仿某个函数或者对象">模仿某个函数或者对象</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ProductionClass</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">closer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">something</span><span class="p">):</span>
        <span class="n">something</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> real <span class="o">=</span> ProductionClass<span class="o">()</span>
<span class="o">&gt;&gt;&gt;</span> mock <span class="o">=</span> MagicMock<span class="o">()</span>
<span class="o">&gt;&gt;&gt;</span> real.closer<span class="o">(</span>mock<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> mock.close.assert_called_with<span class="o">()</span>  <span class="c"># assert_called_with（）用于测试是否被正确呼出</span>
</code></pre></div></div>

<h3 id="模仿某个类">模仿某个类</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">some_function</span><span class="p">():</span>
    <span class="n">instance</span> <span class="o">=</span> <span class="n">module</span><span class="p">.</span><span class="n">Foo</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">instance</span><span class="p">.</span><span class="n">method</span><span class="p">()</span>

<span class="k">with</span> <span class="n">patch</span><span class="p">(</span><span class="s">'module.Foo'</span><span class="p">)</span> <span class="k">as</span> <span class="n">mock</span><span class="p">:</span>
    <span class="n">instance</span> <span class="o">=</span> <span class="n">mock</span><span class="p">.</span><span class="n">return_value</span>
    <span class="n">instance</span><span class="p">.</span><span class="n">method</span><span class="p">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">'the result'</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">some_function</span><span class="p">()</span>
    <span class="k">assert</span> <span class="n">result</span> <span class="o">==</span> <span class="s">'the result'</span>
</code></pre></div></div>

<h3 id="模仿的命名与呼出记录">模仿的命名与呼出记录</h3>
<p><code class="language-plaintext highlighter-rouge">mock_calls</code>记录mock被呼出的次数，可以用来与期待值做比较。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> mock <span class="o">=</span> MagicMock<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s1">'foo'</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> mock
&lt;MagicMock <span class="nv">name</span><span class="o">=</span><span class="s1">'foo'</span> <span class="nb">id</span><span class="o">=</span><span class="s1">'...'</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> mock.method<span class="o">()</span>
&lt;MagicMock <span class="nv">name</span><span class="o">=</span><span class="s1">'mock.method()'</span> <span class="nb">id</span><span class="o">=</span><span class="s1">'...'</span><span class="o">&gt;</span>

<span class="o">&gt;&gt;&gt;</span> mock.attribute.method<span class="o">(</span>10, <span class="nv">x</span><span class="o">=</span>53<span class="o">)</span>
&lt;MagicMock <span class="nv">name</span><span class="o">=</span><span class="s1">'mock.attribute.method()'</span> <span class="nb">id</span><span class="o">=</span><span class="s1">'...'</span><span class="o">&gt;</span>

<span class="o">&gt;&gt;&gt;</span> mock.mock_calls
<span class="o">[</span>call.method<span class="o">()</span>, call.attribute.method<span class="o">(</span>10, <span class="nv">x</span><span class="o">=</span>53<span class="o">)]</span>
<span class="o">&gt;&gt;&gt;</span> expected <span class="o">=</span> <span class="o">[</span>call.method<span class="o">()</span>, call.attribute.method<span class="o">(</span>10, <span class="nv">x</span><span class="o">=</span>53<span class="o">)]</span>
<span class="o">&gt;&gt;&gt;</span> mock.mock_calls <span class="o">==</span> expected
True
</code></pre></div></div>

<h3 id="设置模仿的返回值和属性">设置模仿的返回值和属性</h3>
<p>下面这个例子是一个关于<code class="language-plaintext highlighter-rouge">mock.connection.cursor().execute("SELECT 1")</code>返回值的测试。
相关知识：<a href="https://docs.python.org/3.5/library/unittest.mock.html#unittest.mock.call"><code class="language-plaintext highlighter-rouge">call</code>的使用</a></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> mock <span class="o">=</span> MagicMock<span class="o">()</span>
<span class="o">&gt;&gt;&gt;</span> cursor <span class="o">=</span> mock.connection.cursor.return_value
<span class="o">&gt;&gt;&gt;</span> cursor.execute.return_value <span class="o">=</span> <span class="o">[</span><span class="s1">'foo'</span><span class="o">]</span>
<span class="o">&gt;&gt;&gt;</span> mock.connection.cursor<span class="o">()</span>.execute<span class="o">(</span><span class="s1">'SELECT 1'</span><span class="o">)</span>
<span class="o">[</span><span class="s1">'foo'</span><span class="o">]</span>
<span class="o">&gt;&gt;&gt;</span> expected <span class="o">=</span> call.connection.cursor<span class="o">()</span>.execute<span class="o">(</span><span class="s1">'SELECT 1'</span><span class="o">)</span>.call_list<span class="o">()</span>
<span class="o">&gt;&gt;&gt;</span> mock.mock_calls
<span class="o">[</span>call.connection.cursor<span class="o">()</span>, call.connection.cursor<span class="o">()</span>.execute<span class="o">(</span><span class="s1">'SELECT 1'</span><span class="o">)]</span>
<span class="o">&gt;&gt;&gt;</span> mock.mock_calls <span class="o">==</span> expected
True
</code></pre></div></div>

<h3 id="设置模仿的例外">设置模仿的例外</h3>
<p><code class="language-plaintext highlighter-rouge">side_effect</code>是一个很好用的属性。比如说这里可以设置函数的例外。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> mock <span class="o">=</span> Mock<span class="o">(</span><span class="nv">side_effect</span><span class="o">=</span>Exception<span class="o">(</span><span class="s1">'Boom!'</span><span class="o">))</span>
<span class="o">&gt;&gt;&gt;</span> mock<span class="o">()</span>
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  ...
Exception: Boom!
</code></pre></div></div>

<h3 id="动态设定模仿的返回值">动态设定模仿的返回值</h3>
<p>如果想让mock每次被呼出时返回不同值，同样可以使用<code class="language-plaintext highlighter-rouge">side_effect</code>.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> mock <span class="o">=</span> MagicMock<span class="o">(</span><span class="nv">side_effect</span><span class="o">=[</span>4, 5, 6]<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> mock<span class="o">()</span>
4
<span class="o">&gt;&gt;&gt;</span> mock<span class="o">()</span>
5
<span class="o">&gt;&gt;&gt;</span> mock<span class="o">()</span>
6
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">side_effect</code>同样可以使mock根据不同参数返回不同值。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> vals <span class="o">=</span> <span class="o">{(</span>1, 2<span class="o">)</span>: 1, <span class="o">(</span>2, 3<span class="o">)</span>: 2<span class="o">}</span>
<span class="o">&gt;&gt;&gt;</span> def side_effect<span class="o">(</span><span class="k">*</span>args<span class="o">)</span>:
...     <span class="k">return </span>vals[args]
...
<span class="o">&gt;&gt;&gt;</span> mock <span class="o">=</span> MagicMock<span class="o">(</span><span class="nv">side_effect</span><span class="o">=</span>side_effect<span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> mock<span class="o">(</span>1, 2<span class="o">)</span>
1
<span class="o">&gt;&gt;&gt;</span> mock<span class="o">(</span>2, 3<span class="o">)</span>
2
</code></pre></div></div>

<p>太困了，先写到这里吧。</p>
:ET